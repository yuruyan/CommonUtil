<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonTools</name>
    </assembly>
    <members>
        <member name="M:CommonTools.Converter.MapperUtils.AddCommonConverters(AutoMapper.IMapperConfigurationExpression)">
            <summary>
            添加常见类型转换器
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="T:CommonTools.Converter.LongToDateTimeTypeConverter">
            <summary>
            时间戳 ms 转 DateTime
            </summary>
        </member>
        <member name="T:CommonTools.Converter.DateTimeToLongTypeConverter">
            <summary>
            DateTime 转 时间戳 ms
            </summary>
        </member>
        <member name="T:CommonTools.Model.NoExceptionAttribute">
            <summary>
            表示不抛出异常
            </summary>
        </member>
        <member name="T:CommonTools.Model.SingleInstanceAttribute">
            <summary>
            表示只有一个实例
            </summary>
        </member>
        <member name="T:CommonTools.Model.ThreadSafeAttribute">
            <summary>
            表示线程安全
            </summary>
        </member>
        <member name="T:CommonTools.Model.CanBeCalledInAnyThreadAttribute">
            <summary>
            表示可以被任意线程调用
            </summary>
        </member>
        <member name="M:CommonTools.Model.DTResult`1.FromResult``1(CommonTools.Model.DTResult{``0})">
            <summary>
            根据 result 创建 DTResult，不拷贝 data
            </summary>
            <typeparam name="Source"></typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Model.DTResults`1.FromResult``1(CommonTools.Model.DTResults{``0})">
            <summary>
            根据 result 创建 DataTransferResults
            </summary>
            <typeparam name="Source"></typeparam>
            <typeparam name="Destination"></typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Model.DTResult.FromResult(CommonTools.Model.DTResult)">
            <summary>
            根据 result 创建 DTResult
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Model.EnvironmentMode">
            <summary>
            开发模式
            </summary>
        </member>
        <member name="T:CommonTools.Model.ParseException">
            <summary>
            解析错误
            </summary>
        </member>
        <member name="T:CommonTools.Model.LoadException">
            <summary>
            加载错误
            </summary>
        </member>
        <member name="M:CommonTools.Model.ISortable.Ascend">
            <summary>
            升序
            </summary>
        </member>
        <member name="M:CommonTools.Model.ISortable.AscendBy``1(``0)">
            <summary>
            升序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sorter"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Model.ISortable.Descend">
            <summary>
            降序
            </summary>
        </member>
        <member name="M:CommonTools.Model.ISortable.DescendBy``1(``0)">
            <summary>
            降序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sorter"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Model.ISortable`1.Ascend">
            <summary>
            升序
            </summary>
        </member>
        <member name="M:CommonTools.Model.ISortable`1.AscendBy``1(``0)">
            <summary>
            升序
            </summary>
            <typeparam name="Sorter"></typeparam>
            <param name="sorter"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Model.ISortable`1.Descend">
            <summary>
            降序
            </summary>
        </member>
        <member name="M:CommonTools.Model.ISortable`1.DescendBy``1(``0)">
            <summary>
            降序
            </summary>
            <typeparam name="Sorter"></typeparam>
            <param name="sorter"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CommonTools.Model.ISortable`2.AscendBy(`0)" -->
        <member name="M:CommonTools.Model.ISortable`2.DescendBy(`0)">
            <summary>
            降序
            </summary>
            <param name="sorter"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Model.JsonResponse`1.When(System.Boolean,`0,System.String)">
            <summary>
            成功返回 <see cref="M:CommonTools.Model.JsonResponse`1.Success(`0)"/>，失败返回 <see cref="M:CommonTools.Model.JsonResponse`1.Failed(`0)"/>
            </summary>
            <param name="success"></param>
            <param name="data"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Model.JsonResponse`1.From(`0,System.String)">
            <summary>
            <paramref name="data"/> 不为 null 返回 <see cref="M:CommonTools.Model.JsonResponse`1.Success(`0)"/>，否则返回 <see cref="M:CommonTools.Model.JsonResponse`1.Failed(`0)"/>
            </summary>
            <param name="data"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Model.JsonResponse.When(System.Boolean,System.String)">
            <summary>
            成功返回 <see cref="P:CommonTools.Model.JsonResponse.Success"/>，是否返回 <see cref="P:CommonTools.Model.JsonResponse.Failed"/>
            </summary>
            <param name="success"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="E:CommonTools.Model.ObservableProperty`1.ValueChanged">
            <summary>
            值改变时触发
            </summary>
        </member>
        <member name="E:CommonTools.Model.ObservableProperty`1.ValueSet">
            <summary>
            设置时触发
            </summary>
        </member>
        <member name="T:CommonTools.Resources.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CommonTools.Resources.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CommonTools.Resources.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CommonTools.Resources.Resource.ChineseCharacterPinYin">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="F:CommonTools.Utils.CommonUtils.PathSpliterRegex">
            <summary>
            路径分隔符正则
            </summary>
        </member>
        <member name="P:CommonTools.Utils.CommonUtils.ProcessPath">
            <summary>
            Current process path
            </summary>
        </member>
        <member name="P:CommonTools.Utils.CommonUtils.ProcessDirectory">
            <summary>
            Current process directory
            </summary>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.GetPathSpliterRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match a character in the set [/\\].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.Copy``1(``0)">
            <summary>
            拷贝对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:CommonTools.Utils.CommonUtils.SingletonDict">
            <summary>
            单例模式对象 Dict
            </summary>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.GetSingletonInstance(System.Type)">
            <summary>
            获取单例对象
            </summary>
            <param name="type"></param>
            <returns></returns>
            <exception cref="T:System.Exception">对象创建失败</exception>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.GetSingletonInstance``1">
            <summary>
            获取单例对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.Exception">对象创建失败</exception>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.GetSingletonInstance(System.Type,System.Func{System.Object})">
            <summary>
            根据 init 函数创建单例对象
            </summary>
            <param name="type"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.GetSingletonInstance``1(System.Func{System.Object})">
            <summary>
            根据 init 函数创建单例对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.RemovePathSpliter(System.String)">
            <summary>
            移除路径分隔符(\, /)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.NullCheck``1(``0)">
            <summary>
            检查 null，用以消除 warning
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns>如果 <paramref name="value"/> 为 null，则抛出异常，否则返回</returns>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.CheckRange(System.Double,System.Double)">
            <summary>
            检查 Range 是否有效
            </summary>
            <returns>无效返回 null</returns>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.IsLikelyBinaryFile(System.String)">
            <summary>
            判断文件是否可能是二进制文件
            
            最多读取前 64kb 字节，判断是否包含 '\0'
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.GetUniqueRandomFileName(System.String)">
            <summary>
            获取随机唯一文件名
            </summary>
            <param name="dirPath">随机文件所在路径，默认为 <see cref="P:System.Environment.CurrentDirectory"/></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.CommonUtils.GetUniqueFileNameFor(System.String,System.UInt32)">
            <summary>
            获取唯一文件名称，如果已存在文件，则自动重命名
            </summary>
            <param name="filepath"></param>
            <param name="autoRenameCount">重命名最大次数</param>
            <returns></returns>
            <exception cref="T:System.Exception">自动重命名超过最大次数</exception>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.OneKbSize">
            <summary>
            1 KB 大小，以 byte 为单位
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.OneMbSize">
            <summary>
            1 MB 大小，以 byte 为单位
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.OneGbSize">
            <summary>
            1 GB 大小，以 byte 为单位
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.OneTbSize">
            <summary>
            1 TB 大小，以 byte 为单位
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.DefaultFileBufferSize">
            <summary>
            默认文件缓冲区大小，以 byte 为单位
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.HalfMinuteSecond">
            <summary>
            半分钟的秒数
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.HalfMinuteMillisecond">
            <summary>
            半分钟的毫秒数
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.OneMinuteSecond">
            <summary>
            1分钟的秒数
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.OneMinuteMillisecond">
            <summary>
            1分钟的毫秒数
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.HalfHourSecond">
            <summary>
            半小时的秒数
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.HalfHourMillisecond">
            <summary>
            半小时的毫秒数
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.OneHourSecond">
            <summary>
            1小时的秒数
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.OneHourMillisecond">
            <summary>
            1小时的毫秒数
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.OneDaySecond">
            <summary>
            1天的秒数
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ConstantUtils.OneDayMillisecond">
            <summary>
            1天的毫秒数
            </summary>
        </member>
        <member name="M:CommonTools.Utils.CryptoUtils.AESEncode(System.Byte[],System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="message"></param>
            <param name="key">32位16进制字符串</param>
            <param name="iv">32位16进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.CryptoUtils.AESEncode(System.String,System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="message">使用 UTF8 编码</param>
            <param name="key">32位16进制字符串</param>
            <param name="iv">32位16进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.CryptoUtils.AESEncodeToBase64(System.String,System.String,System.String)">
            <summary>
            加密后编码为 base64 字符串
            </summary>
            <param name="message"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.CryptoUtils.AESDecode(System.Byte[],System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="message"></param>
            <param name="key">32位16进制字符串</param>
            <param name="iv">32位16进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.CryptoUtils.AESDecodeFromBase64(System.String,System.String,System.String)">
            <summary>
            解密 base64 编码的数据
            </summary>
            <param name="data"></param>
            <param name="key">32位16进制字符串</param>
            <param name="iv">32位16进制字符串</param>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Utils.DateTimeUtils.CuruentMilliseconds">
            <summary>
            当前时间戳(ms)
            </summary>
        </member>
        <member name="P:CommonTools.Utils.DateTimeUtils.CuruentSeconds">
            <summary>
            当前时间戳(s)
            </summary>
        </member>
        <member name="M:CommonTools.Utils.DateTimeUtils.ToTimestamp(System.DateTime)">
            <summary>
            DateTime 转 Timestamp
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.DateTimeUtils.ToDateTime(System.String,System.String)">
            <summary>
            string 日期转 DateTime
            </summary>
            <param name="value"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.DateTimeUtils.ToDateTime(System.Int64,System.Boolean)">
            <summary>
            时间戳转 DateTime
            </summary>
            <param name="timestamp"></param>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.DateTimeUtils.GetYesterdayTime(System.DateTime)">
            <summary>
            获取前一天的 DateTime
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.DateTimeUtils.GetTomorrowTime(System.DateTime)">
            <summary>
            获取后一天的 DateTime
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.DateTimeUtils.GetDayRangeTime(System.DateTime)">
            <summary>
            获取指定日期一天内的 (Start, End) Range，End 不包括
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="F:CommonTools.Utils.Debounce.NoResponseTimes">
            <summary>
            超过 interval * <see cref="F:CommonTools.Utils.Debounce.NoResponseTimes"/> 时间没有请求，则暂停定时器
            </summary>
        </member>
        <member name="P:CommonTools.Utils.Debounce.CanInvoke">
            <summary>
            是否可以调用
            </summary>
            <returns></returns>
        </member>
        <member name="P:CommonTools.Utils.Debounce.CanStop">
            <summary>
            是否可以停止计时以节省资源
            </summary>
            <returns></returns>
        </member>
        <member name="F:CommonTools.Utils.DigestUtils.ReadBufferSize">
            <summary>
            默认读取缓冲区大小
            </summary>
        </member>
        <member name="M:CommonTools.Utils.DigestUtils.GeneralDigest(System.String,Org.BouncyCastle.Crypto.IDigest)">
            <summary>
            摘要算法
            </summary>
            <param name="text"></param>
            <param name="digest"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.DigestUtils.GeneralDigest(System.IO.Stream,Org.BouncyCastle.Crypto.IDigest)">
            <summary>
            摘要算法
            </summary>
            <param name="stream"></param>
            <param name="digest"></param>
            <returns>digest</returns>
            <remarks>不会自动关闭 stream</remarks>
        </member>
        <member name="M:CommonTools.Utils.DigestUtils.MD5Digest(System.String)">
            <summary>
            md5 摘要
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.DigestUtils.MD5Digest(System.IO.Stream)">
            <summary>
            md5 摘要
            </summary>
            <param name="stream"></param>
            <inheritdoc cref="M:CommonTools.Utils.DigestUtils.GeneralDigest(System.IO.Stream,Org.BouncyCastle.Crypto.IDigest)"/>
        </member>
        <member name="M:CommonTools.Utils.DigestUtils.Sha256Digest(System.String)">
            <summary>
            Sha256Digest 摘要
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.DigestUtils.Sha256Digest(System.IO.Stream)">
            <summary>
            Sha256Digest 摘要
            </summary>
            <param name="stream"></param>
            <inheritdoc cref="M:CommonTools.Utils.DigestUtils.GeneralDigest(System.IO.Stream,Org.BouncyCastle.Crypto.IDigest)"/>
        </member>
        <member name="M:CommonTools.Utils.DigestUtils.Sha512Digest(System.String)">
            <summary>
            Sha512Digest 摘要
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.DigestUtils.Sha512Digest(System.IO.Stream)">
            <summary>
            Sha512Digest 摘要
            </summary>
            <param name="stream"></param>
            <inheritdoc cref="M:CommonTools.Utils.DigestUtils.GeneralDigest(System.IO.Stream,Org.BouncyCastle.Crypto.IDigest)"/>
        </member>
        <member name="T:CommonTools.Utils.ExtensionUtils">
            <summary>
            扩展方法
            </summary>
            <summary>
            for string
            </summary>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Remove``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            从 collection 中移除符合 predicate 条件的第一个元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="predicate"></param>
            <returns>
            true if item was successfully removed from the System.Collections.Generic.ICollection;
            otherwise, false. This method also returns false if item is not found in the
            original System.Collections.Generic.ICollection
            </returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            从 collection 中移除符合 predicate 条件的所有元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="predicate"></param>
            <returns>移除的元素</returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.RemoveList``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            移除多个元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisCollection"></param>
            <param name="toBeRemovedItems"></param>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.RemoveKeyList``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            移除 Dictionary 多个 Key
            </summary>
            <typeparam name="Key"></typeparam>
            <typeparam name="Value"></typeparam>
            <param name="source"></param>
            <param name="keys"></param>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Print``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String)">
            <summary>
            打印集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <param name="count">打印输出个数，-1 代表打印所有</param>
            <param name="separator">分隔符</param>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.UpdateWithCollection``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.ICollection{``1},System.Action{``1,``0},System.Func{``1,``0})">
            <summary>
            更新现有集合，不替换元素，更新后长度为 <typeparamref name="Source"/> 的长度
            </summary>
            <typeparam name="Target"></typeparam>
            <typeparam name="Source"></typeparam>
            <param name="target"></param>
            <param name="source"></param>
            <param name="updater">更新原数据</param>
            <param name="converter">转换器</param>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.ReplaceWithCollection``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.ICollection{``1},System.Func{``1,``0})">
            <summary>
            用新数据替换现有数据，更新后长度为 <typeparamref name="Source"/> 的长度
            </summary>
            <typeparam name="Target"></typeparam>
            <typeparam name="Source"></typeparam>
            <param name="target"></param>
            <param name="source"></param>
            <param name="converter">转换器</param>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            ForEach
            </summary>
            <typeparam name="Source"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            ForEach
            </summary>
            <typeparam name="Source"></typeparam>
            <param name="source"></param>
            <param name="action">第一个参数为索引</param>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            获取元素所在位置
            </summary>
            <typeparam name="Source"></typeparam>
            <param name="source"></param>
            <param name="target"></param>
            <returns>失败返回 -1</returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            获取元素所在位置
            </summary>
            <typeparam name="Source"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns>失败返回 -1</returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Cast``1(System.Collections.ICollection,System.Func{System.Object,``0})">
            <summary>
            转换
            </summary>
            <typeparam name="Target"></typeparam>
            <param name="source"></param>
            <param name="func"></param>
            <returns>A new list which contains elements that returned from <paramref name="func"/></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.ResizeToLength``1(System.Collections.Generic.ICollection{``0},System.Int32,``0)">
            <summary>
            扩充集合到指定长度
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="length"></param>
            <param name="defaultValue">填充默认值</param>
            <returns><paramref name="source"/></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.ResizeByCount``1(System.Collections.Generic.ICollection{``0},System.Int32,``0)">
            <summary>
            扩充集合 <paramref name="count"/> 个元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="count"></param>
            <param name="defaultValue">填充默认值</param>
            <returns><paramref name="source"/></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Transpose``1(``0[0:,0:])">
            <summary>
            数组转置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns>A new array</returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Transpose``1(System.Collections.Generic.ICollection{System.Collections.Generic.IList{``0}})">
            <summary>
            集合转置，第二维长度必须相同
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns>A new list</returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            批量添加数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="data"></param>
            <returns><paramref name="source"/></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <inheritdoc cref="M:CommonTools.Utils.ExtensionUtils.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0}[])"/>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Join``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            按顺序集合多个数据集
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="data"></param>
            <returns>A new list which contains all data from <paramref name="source"/> and <paramref name="data"/></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            查看是否包含指定 Predicate 的元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.TryGet``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            获取一个符合 <paramref name="predicate"/> 的元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="result"></param>
            <returns>成功返回 true，失败返回 false</returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.GetSamePrefix(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取集合相同前缀
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            随机排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            移除重复项，保证元素顺序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Int32 序列
            </summary>
            <param name="start">起始值</param>
            <param name="count">个数</param>
            <param name="step">间隔</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Range(System.Int64,System.Int32,System.Int64)">
            <summary>
            Int64 序列
            </summary>
            <param name="start">起始值</param>
            <param name="count">个数</param>
            <param name="step">间隔</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Range(System.Double,System.Int32,System.Double)">
            <summary>
            Double 序列
            </summary>
            <param name="start">起始值</param>
            <param name="count">个数</param>
            <param name="step">间隔</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.Range(System.Single,System.Int32,System.Single)">
            <summary>
            Double 序列
            </summary>
            <param name="start">起始值</param>
            <param name="count">个数</param>
            <param name="step">间隔</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.ReplaceSlashWithBackSlash(System.String)">
            <summary>
            替换 '/' 为 '\\'
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.ReplaceBackSlashWithSlash(System.String)">
            <summary>
            替换 '\\' 为 '/'
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ExtensionUtils.ReplaceLineFeedWithLinuxStyle(System.String)">
            <summary>
            将换行符替换为 Linux 样式 (\n)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.FileLockUtils.TryLockFile(System.String)">
            <summary>
            尝试锁定文件
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.FileLockUtils.IsFileLocked(System.String)">
            <summary>
            文件是否锁定
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Utils.MessageUtils">
            <summary>
            消息工具
            </summary>
        </member>
        <member name="T:CommonTools.Utils.MessageUtils.MessageEventHandler">
            <summary>
            消息处理
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="F:CommonTools.Utils.MessageUtils.LastMessageDict">
            <summary>
            最近一次消息数据
            </summary>
        </member>
        <member name="M:CommonTools.Utils.MessageUtils.SendMessage(System.String,System.Object,System.Object)">
            <summary>
            发送消息
            </summary>
            <param name="groupName">组名称，区分大小写</param>
            <param name="sender"></param>
            <param name="message">消息</param>
        </member>
        <member name="M:CommonTools.Utils.MessageUtils.GetLastMessage(System.String,System.Object@)">
            <summary>
            获取最近一次消息
            </summary>
            <param name="groupName">分组名称</param>
            <param name="message">返回的消息</param>
            <returns>存在消息返回 true，否则返回 false</returns>
        </member>
        <member name="M:CommonTools.Utils.MessageUtils.SubscribeMessage(System.String,CommonTools.Utils.MessageUtils.MessageEventHandler)">
            <summary>
            订阅消息
            </summary>
            <param name="groupName">组名称，区分大小写</param>
            <param name="handler"></param>
        </member>
        <member name="M:CommonTools.Utils.MessageUtils.UnSubscribeMessage(System.String,CommonTools.Utils.MessageUtils.MessageEventHandler)">
            <summary>
            取消订阅消息
            </summary>
            <param name="groupName">组名称，区分大小写</param>
            <param name="handler"></param>
        </member>
        <member name="M:CommonTools.Utils.NameUtils.FullNameOf``1(``0,System.String)">
            <summary>
            获取全名称表达式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="_"></param>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.NameUtilsExtension.FullNameOf``1(``0,System.String)">
            <inheritdoc cref="M:CommonTools.Utils.NameUtils.FullNameOf``1(``0,System.String)"/>
        </member>
        <member name="M:CommonTools.Utils.NetworkUtils.GetLocalIpAddress">
            <summary>
            获取本机 IP 地址
            </summary>
            <returns>失败返回 null</returns>
        </member>
        <member name="M:CommonTools.Utils.NetworkUtils.GetInUsePorts">
            <summary>
            获取正在使用的端口
            </summary>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Utils.RandomUtils">
            <summary>
            随机数工具
            </summary>
        </member>
        <member name="F:CommonTools.Utils.RandomUtils.Numbers">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:CommonTools.Utils.RandomUtils.LowerCaseAlphabet">
            <summary>
            字母
            </summary>
        </member>
        <member name="F:CommonTools.Utils.RandomUtils.Letters">
            <summary>
            数字和字母
            </summary>
        </member>
        <member name="M:CommonTools.Utils.RandomUtils.RandomDouble(System.Double,System.Double)">
            <summary>
            随机双精度浮点数
            </summary>
            <param name="min">最小值，包括</param>
            <param name="max">最大值，不包括</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CommonTools.Utils.RandomUtils.RandomSingle(System.Single,System.Single)">
            <summary>
            随机单精度浮点数
            </summary>
            <param name="min">最小值，包括</param>
            <param name="max">最大值，不包括</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:CommonTools.Utils.RandomUtils.HandleCharacterCase(System.Text.StringBuilder,CommonTools.Model.CharacterCase)">
            <summary>
            处理字符大小写
            </summary>
            <param name="sb"></param>
            <param name="characterCase"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.RandomUtils.RandomLetter(System.Int32,CommonTools.Model.CharacterCase)">
            <summary>
            随机数字字母
            </summary>
            <param name="length">长度</param>
            <param name="characterCase">大小写</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.RandomUtils.RandomAlphabet(System.Int32,CommonTools.Model.CharacterCase)">
            <summary>
            随机字母
            </summary>
            <param name="length">长度</param>
            <param name="characterCase">大小写</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.RandomUtils.RandomStringNumber(System.Int32)">
            <summary>
            随机数字字符串
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="T:CommonTools.Utils.ResourceUtils">
            <summary>
            资源工具
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ResourceUtils.ChineseCharacterPinYinDict">
            <summary>
            中文汉字拼音
            </summary>
        </member>
        <member name="F:CommonTools.Utils.ResourceUtils.ToneLetterDict">
            <summary>
            声调对应字母
            </summary>
        </member>
        <member name="M:CommonTools.Utils.ResourceUtils.GetChineseCharacterPinYin(System.Char)">
            <summary>
            获取汉字拼音
            </summary>
            <param name="character">汉字</param>
            <returns>找不到返回空</returns>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.Try(System.Action)">
            <summary>
            简化 try 代码块
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.TryAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            简化 try 代码块，以异步方式
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.Try``1(System.Func{``0},``0)">
            <summary>
            简化 try 代码块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task"></param>
            <param name="defaultValue">发生异常时的返回值</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.TryAsync``1(System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>
            简化 try 代码块，以异步方式
            </summary>
            <param name="task"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.DelayTaskAsync(System.Int32,System.Action)">
            <summary>
            延迟执行任务
            </summary>
            <param name="millisecond"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.DelayTaskAsync``1(System.Int32,System.Func{``0})">
            <summary>
            延迟执行任务
            </summary>
            <param name="millisecond"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.WaitFor(System.Func{System.Boolean},System.Action,System.Int32)">
            <summary>
            等待 predicate 返回 true，然后执行 action
            </summary>
            <param name="predicate"></param>
            <param name="action">等待结束后执行</param>
            <param name="interval">检查间隔时间(ms)</param>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.WaitFor(System.Func{System.Boolean},System.Int32)">
            <summary>
            等待 predicate 返回 true，然后执行 action
            </summary>
            <param name="predicate"></param>
            <param name="interval">检查间隔时间(ms)</param>
        </member>
        <member name="F:CommonTools.Utils.TaskUtils.MethodCalledSet">
            <summary>
            调用过的方法 Set
            </summary>
        </member>
        <member name="F:CommonTools.Utils.TaskUtils.MethodCalledLockDict">
            <summary>
            Tuple lock
            </summary>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.EnsureCalledOnce(System.Object,System.Delegate,System.Boolean,System.Object)">
            <summary>
            确保方法只调用一次
            </summary>
            <param name="identifier">唯一标识</param>
            <param name="callback">回调方法</param>
            <param name="hasParameters">是否有参数</param>
            <param name="args"><paramref name="callback"/> 参数</param>
            <returns>返回 true 则未调用过，否则返回 false</returns>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.EnsureCalledOnce(System.Object,System.Delegate,System.Object)">
            <inheritdoc cref="M:CommonTools.Utils.TaskUtils.EnsureCalledOnce(System.Object,System.Delegate,System.Boolean,System.Object)"/>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.EnsureCalledOnce(System.Object,System.Delegate)">
            <inheritdoc cref="M:CommonTools.Utils.TaskUtils.EnsureCalledOnce(System.Object,System.Delegate,System.Boolean,System.Object)"/>
        </member>
        <member name="F:CommonTools.Utils.TaskUtils.PreviousTaskDict">
            <summary>
            (identifier, 上一个任务)
            </summary>
        </member>
        <member name="M:CommonTools.Utils.TaskUtils.GetPreviousTaskQueueTask(System.Object)">
            <summary>
            Get last task, auto Initialie
            </summary>
            <param name="Identifier"></param>
            <returns></returns>
        </member>
        <member name="F:CommonTools.Utils.ThrottleUtils.Interval">
            <summary>
            默认调用间隔时间 ms
            </summary>
        </member>
        <member name="M:CommonTools.Utils.ThrottleUtils.ValidateInterval(System.Int32)">
            <summary>
            合法化 interval
            </summary>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ThrottleUtils.CheckStateAndSet(System.Object,System.Int32)">
            <summary>
            检查状态并设置，完成了并且调用时间间隔大于 interval 才返回 true
            </summary>
            <param name="identifier">标识</param>
            <param name="interval">调用时间间隔</param>
            <returns>通过则返回 true，否则 false</returns>
        </member>
        <member name="M:CommonTools.Utils.ThrottleUtils.SetFinished(System.Object)">
            <summary>
            设置为已完成
            </summary>
            <param name="identifier">标识</param>
        </member>
        <member name="M:CommonTools.Utils.ThrottleUtils.IsFinished(System.Object)">
            <summary>
            检查是否完成，不存在则返回 true
            </summary>
            <param name="identifier">标识</param>
            <returns></returns>
        </member>
        <member name="M:CommonTools.Utils.ThrottleUtils.Throttle(System.Object,System.Action,System.Int32)">
            <summary>
            同步节流
            </summary>
            <param name="identifier">标识</param>
            <param name="callback"></param>
            <param name="interval">间隔多长时间才允许再次调用</param>
        </member>
        <member name="M:CommonTools.Utils.ThrottleUtils.ThrottleAsync(System.Object,System.Func{System.Threading.Tasks.Task},System.Int32)">
            <summary>
            异步节流
            </summary>
            <param name="identifier">标识</param>
            <param name="callback"></param>
            <param name="interval">间隔多长时间才允许再次调用</param>
        </member>
        <member name="M:CommonTools.Utils.ThrottleUtils.ThrottleAsync``1(System.Object,System.Func{System.Threading.Tasks.Task{``0}},System.Int32,``0)">
            <summary>
            异步节流
            </summary>
            <param name="identifier">标识</param>
            <param name="callback"></param>
            <param name="interval">间隔多长时间才允许再次调用</param>
            <param name="fallbackValue">未调用返回值</param>
            <returns></returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetPathSpliterRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the GetPathSpliterRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.GetPathSpliterRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetPathSpliterRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetPathSpliterRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetPathSpliterRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GetPathSpliterRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetPathSpliterRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GetPathSpliterRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
