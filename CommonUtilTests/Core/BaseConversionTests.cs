using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace CommonUtil.Core.Tests;

[TestClass()]
public class BaseConversionTests {
    private static readonly ulong[] ConvertFromDecimalData = { 0, 1, 2, 3, 10, 64, 100, 1000, 100000, 100000000 };
    private static readonly string[][] ConvertFromDecimalDataResult = new string[][] {
        new string[] {
            "0", "0", "0", "0", "0", "0", "0",
            "0", "0", "0", "0", "0", "0", "0",
            "0", "0", "0", "0", "0", "0", "0",
            "0", "0", "0", "0", "0", "0", "0",
            "0", "0", "0", "0", "0", "0", "0"
        },
        new string[] {
            "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1",
            "1", "1", "1", "1", "1", "1", "1"
        },
        new string[] {
            "10", "2", "2", "2", "2", "2", "2",
            "2",  "2", "2", "2", "2", "2", "2",
            "2",  "2", "2", "2", "2", "2", "2",
            "2",  "2", "2", "2", "2", "2", "2",
            "2",  "2", "2", "2", "2", "2", "2"
        },
        new string[] {
            "11", "10", "3", "3", "3", "3", "3",
            "3",  "3",  "3", "3", "3", "3", "3",
            "3",  "3",  "3", "3", "3", "3", "3",
            "3",  "3",  "3", "3", "3", "3", "3",
            "3",  "3",  "3", "3", "3", "3", "3"
        },
        new string[] {
            "1010", "101", "22", "20", "14",
            "13",   "12",  "11", "10", "a",
            "a",    "a",   "a",  "a",  "a",
            "a",    "a",   "a",  "a",  "a",
            "a",    "a",   "a",  "a",  "a",
            "a",    "a",   "a",  "a",  "a",
            "a",    "a",   "a",  "a",  "a"
        },
        new string[] {
            "1000000", "2101", "1000", "224",
            "144",     "121",  "100",  "71",
            "64",      "59",   "54",   "4c",
            "48",      "44",   "40",   "3d",
            "3a",      "37",   "34",   "31",
            "2k",      "2i",   "2g",   "2e",
            "2c",      "2a",   "28",   "26",
            "24",      "22",   "20",   "1v",
            "1u",      "1t",   "1s"
        },
        new string[] {
            "1100100", "10201", "1210", "400",
            "244",     "202",   "144",  "121",
            "100",     "91",    "84",   "79",
            "72",      "6a",    "64",   "5f",
            "5a",      "55",    "50",   "4g",
            "4c",      "48",    "44",   "40",
            "3m",      "3j",    "3g",   "3d",
            "3a",      "37",    "34",   "31",
            "2w",      "2u",    "2s"
        },
        new string[] {
            "1111101000", "1101001", "33220",
            "13000",      "4344",    "2626",
            "1750",       "1331",    "1000",
            "82a",        "6b4",     "5bc",
            "516",        "46a",     "3e8",
            "37e",        "31a",     "2ec",
            "2a0",        "25d",     "21a",
            "1kb",        "1hg",     "1f0",
            "1cc",        "1a1",     "17k",
            "15e",        "13a",     "118",
            "v8",         "ua",      "te",
            "sk",         "rs"
        },
        new string[] {
            "11000011010100000", "12002011201",
            "120122200",         "11200000",
            "2050544",           "564355",
            "303240",            "162151",
            "100000",            "6914a",
            "49a54",             "36694",
            "2862c",             "1e96a",
            "186a0",             "13606",
            "h2ba",              "eb03",
            "ca00",              "agfj",
            "98da",              "850j",
            "75eg",              "6a00",
            "5ho4",              "524j",
            "4ffc",              "42q8",
            "3l3a",              "3b1p",
            "31l0",              "2pra",
            "2ih6",              "2bm5",
            "255s"
        },
        new string[] {
            "101111101011110000100000000",
            "20222011112012201",
            "11331132010000",
            "201100000000",
            "13531202544",
            "2322662122",
            "575360400",
            "228145181",
            "100000000",
            "514a1531",
            "295a6454",
            "179437c9",
            "d3d1212",
            "8ba496a",
            "5f5e100",
            "42752cg",
            "2ggadha",
            "227675h",
            "1b50000",
            "13a3k7g",
            "j8j9cc",
            "fc7ll2",
            "cd9j2g",
            "a60000",
            "8alepm",
            "6q4e5j",
            "5mjb0g",
            "4pb61p",
            "43dl3a",
            "3f8m8e",
            "2vbo80",
            "2ialc1",
            "26s96g",
            "1vmcmu",
            "1njchs"
        }
    };
    private static readonly string[] ConvertToDecimalData = { "0", "1", "100", "1000", "100000", "100000000" };
    private static readonly ulong[][] ConvertToDecimalResult = new ulong[][] {
        new ulong[] {
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0
        },
        new ulong[] {
            1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1
        },
        new ulong[] {
            4,   9,   16,   25,   36,   49,   64,
            81, 100,  121,  144,  169,  196,  225,
            256, 289,  324,  361,  400,  441,  484,
            529, 576,  625,  676,  729,  784,  841,
            900, 961, 1024, 1089, 1156, 1225, 1296
        },
        new ulong[] {
            8,    27,    64,   125,   216,
            343,   512,   729,  1000,  1331,
            1728,  2197,  2744,  3375,  4096,
            4913,  5832,  6859,  8000,  9261,
            10648, 12167, 13824, 15625, 17576,
            19683, 21952, 24389, 27000, 29791,
            32768, 35937, 39304, 42875, 46656
        },
        new ulong[] {
            32,      243,     1024,     3125,
            7776,    16807,    32768,    59049,
            100000,   161051,   248832,   371293,
            537824,   759375,  1048576,  1419857,
            1889568,  2476099,  3200000,  4084101,
            5153632,  6436343,  7962624,  9765625,
            11881376, 14348907, 17210368, 20511149,
            24300000, 28629151, 33554432, 39135393,
            45435424, 52521875, 60466176
        },
        new ulong[] {
            256,          6561,         65536,
            390625,       1679616,       5764801,
            16777216,      43046721,     100000000,
            214358881,     429981696,     815730721,
            1475789056,    2562890625,    4294967296,
            6975757441,   11019960576,   16983563041,
            25600000000,   37822859361,   54875873536,
            78310985281,  110075314176,  152587890625,
            208827064576,  282429536481,  377801998336,
            500246412961,  656100000000,  852891037441,
            1099511627776, 1406408618241, 1785793904896,
            2251875390625, 2821109907456
        }
    };

    [TestMethod()]
    public void ConvertFromDecimal() {
        for (int i = 0; i < ConvertFromDecimalData.Length; i++) {
            var source = ConvertFromDecimalData[i];
            var result = Enumerable
                .Range(2, 35)
                .Select(b => BaseConversion.ConvertFromDecimal(source, b).ToLowerInvariant());
            Assert.IsTrue(Enumerable.SequenceEqual(result, ConvertFromDecimalDataResult[i]));
        }
    }

    [TestMethod()]
    public void ConvertToDecimal() {
        for (int i = 0; i < ConvertToDecimalData.Length; i++) {
            var source = ConvertToDecimalData[i];
            var result = Enumerable
                .Range(2, 35)
                .Select(b => BaseConversion.ConvertToDecimal(source, b));
            Assert.IsTrue(Enumerable.SequenceEqual(result, ConvertToDecimalResult[i]));
        }
    }
}